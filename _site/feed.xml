<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monte Thakkar</title>
    <description>Welcome stranger!! How did you get here? Sshh.. can you keep a secret please?</description>
    <link>https://monte9.github.io//</link>
    <atom:link href="https://monte9.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 29 Mar 2016 09:11:41 -0700</pubDate>
    <lastBuildDate>Tue, 29 Mar 2016 09:11:41 -0700</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Hackathons</title>
        <description>&lt;p&gt;&lt;strong&gt;Hackathons are for tech zombies and I am one of them!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;if-prompt-bot&quot;&gt;&lt;strong&gt;@If (Prompt bot)&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;winner-most-useful-prompt-command&quot;&gt;&lt;strong&gt;WINNER: Most Useful Prompt Command&lt;/strong&gt;&lt;/h4&gt;

&lt;h4 id=&quot;hacktech16--caltech-pasadena-ca&quot;&gt;&lt;em&gt;@Hacktech’16- Caltech, Pasadena, CA&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Mood based, meta-searching for bots across the entire Prompt platform.&lt;/li&gt;
  &lt;li&gt;Written in Node.js, JavaScript and hosted on Microsoft Azure.&lt;/li&gt;
  &lt;li&gt;I wrote the keyword dictionaries and comparison algorithm in JavaScript.&lt;/li&gt;
  &lt;li&gt;Won a RC Quadcopter Drone with HD Camera. dope!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-eat-ios-app&quot;&gt;&lt;strong&gt;Let’s Eat (iOS App)&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;calhacks15--uc-berkeley-berkeley-ca&quot;&gt;&lt;em&gt;@CalHacks’15- UC Berkeley, Berkeley, CA&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Restaurant reservation made simple with QR Codes; User gets notified when the table is ready and can pay the check through the app when done.&lt;/li&gt;
  &lt;li&gt;I built the entire customer-side app, setup Parse on the backend and implemented Stripe API to process payments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;koclassclub-web-app&quot;&gt;&lt;strong&gt;KoClass.Club (Web App)&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;hackingedu15--san-mateo-event-center-ca&quot;&gt;&lt;em&gt;@HackingEDU’15- San Mateo Event Center, CA&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Web platform that enables students to collaboratively write notes and chat in real time.&lt;/li&gt;
  &lt;li&gt;Professor can share slides and test results on the platform in the classroom.&lt;/li&gt;
  &lt;li&gt;Used Laravel framework with Nginx and Php-Fpm stack.&lt;/li&gt;
  &lt;li&gt;I integrated Boostrap and Moxtra API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flashem-ios-app&quot;&gt;&lt;strong&gt;Flash’em (iOS App)&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;disrupt-hackathon15--tech-crunch-disrupt-san-francisco-ca&quot;&gt;&lt;em&gt;@Disrupt Hackathon’15- Tech Crunch Disrupt, San Francisco, CA&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Social app that matches users based on similar interests &amp;amp; location.&lt;/li&gt;
  &lt;li&gt;I built the entire iOS app making calls to RESTful API.&lt;/li&gt;
  &lt;li&gt;Presented the app on stage to an audience of 500+ people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;karmado-ios-app&quot;&gt;&lt;strong&gt;KarmaDo (iOS App)&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;makehacks15--make-school-san-francisco-ca&quot;&gt;&lt;em&gt;@MakeHacks’15- Make School, San Francisco, CA&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Simple To-Do List app that motivates users to donate to a charity if they miss/forget to complete a task.&lt;/li&gt;
  &lt;li&gt;Worked alongside highschoolers that contributed to the app by learning Swift in under 12 hours.&lt;/li&gt;
  &lt;li&gt;Although not technically challenging, I guided my teammates through building their first iOS app.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 12:24:00 -0700</pubDate>
        <link>https://monte9.github.io//2016/hackathons/</link>
        <guid isPermaLink="true">https://monte9.github.io//2016/hackathons/</guid>
        
        <category>tech</category>
        
        
        <category>blogs</category>
        
      </item>
    
      <item>
        <title>iOS Portfolio</title>
        <description>&lt;p&gt;&lt;strong&gt;“I &lt;em&gt;live&lt;/em&gt;, &lt;em&gt;breathe&lt;/em&gt; and &lt;em&gt;sleep&lt;/em&gt; Swift.” - Monte Thakkar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am really passionate about iOS development and I find developing new iOS apps challenging and fun. I am looking for internship/ full-time opportunities as an iOS Developer to work on ideas that are making (or will make) a difference.&lt;/p&gt;

&lt;h2 id=&quot;implemented-features-&quot;&gt;Implemented features-&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; GET/POST Request (API Calls)&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; OAuth&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; Table View/ Collection View (duh..)&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; Pull to referesh &amp;amp; Infinite Scroll&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; Autolayout&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; Map View&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ballot_box_with_check&quot;&gt;&lt;/span&gt; Camera&lt;/p&gt;

&lt;h1 id=&quot;demo-apps-&quot;&gt;Demo Apps-&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;cute-bunny-app&quot;&gt;Cute Bunny App:&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am really passionate about iOS development and I find developing new iOS apps challenging and fun. I am looking for internship/ full-time opportunities as an iOS Developer to work on ideas that are making (or will make) a difference.
&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://github.com/Monte9/CuteBunnyApp&quot;&gt;&lt;img height=&quot;500&quot; width=&quot;300&quot; src=&quot;/images/CuteBunny.gif&quot; alt=&quot;Cute Bunny iOS App&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;img height=&quot;500&quot; width=&quot;300&quot; src=&quot;/images/FlickM.gif&quot; alt=&quot;FlickM iOS App&quot; /&gt;
&lt;img height=&quot;500&quot; width=&quot;300&quot; src=&quot;/images/CuteBunny-final.gif&quot; alt=&quot;My Profile Photo&quot; /&gt;
&lt;img height=&quot;500&quot; width=&quot;300&quot; src=&quot;/images/CuteBunny-final.gif&quot; alt=&quot;My Profile Photo&quot; /&gt;
## Code Samples-

- Tab Bar setup

```swift
func setupTabBars() {
    // Set up the Tweets View Controller
    let tweetsNavigationController = storyboard.instantiateViewControllerWithIdentifier(&quot;TweetsNavigationController&quot;) as! UINavigationController
    let tweetsViewController = tweetsNavigationController.topViewController as! TweetsViewController
    tweetsNavigationController.tabBarItem.title = &quot;Home&quot;
    tweetsNavigationController.tabBarItem.image = UIImage(named: &quot;home&quot;)

    //Customize Tweets navigation bar UI
    tweetsNavigationController.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor(rgba: &quot;#55acee&quot;).CGColor]

    // Set up the Home View Controller
    let meViewController = storyboard.instantiateViewControllerWithIdentifier(&quot;ProfileViewController&quot;)
    meViewController.tabBarItem.title = &quot;Me&quot;
    meViewController.tabBarItem.image = UIImage(named: &quot;me&quot;)

    // Set up the Tab Bar Controller to have two tabs
    tabBarController.viewControllers = [tweetsNavigationController, meViewController]
    UITabBar.appearance().tintColor = UIColor(rgba: &quot;#55acee&quot;)
    //    UITabBar.appearance().barTintColor = UIColor.blackColor()

    // Create an Image View to replace the Title View
    var imageView: UIImageView = UIImageView(frame: CGRectMake(0.0, 0.0, 40.0, 40.0))
    imageView.contentMode = UIViewContentMode.ScaleAspectFit
    var image: UIImage = UIImage(named: &quot;Icon-Small-50&quot;)!
    imageView.image = image
    tweetsNavigationController.navigationBar.topItem?.titleView = imageView

    // Make the Tab Bar Controller the root view controller
    window?.rootViewController = tabBarController
    window?.makeKeyAndVisible()

}
```



- GET Request

```swift
func makeSearchCallWithCompletion(completion: (gifs: [Gif]?, error: NSError?) -&amp;gt; ()) {
    let url = NSURL(string:&quot;http://api.giphy.com/v1/gifs/search?q=\(searchTerm)&amp;amp;api_key=\(publicBetaApiKey)&quot;)

    let request = NSURLRequest(URL: url!)
    let session = NSURLSession(
        configuration: NSURLSessionConfiguration.defaultSessionConfiguration(),
        delegate:nil,
        delegateQueue:NSOperationQueue.mainQueue()
    )

    let task : NSURLSessionDataTask = session.dataTaskWithRequest(request,
        completionHandler: { (dataOrNil, response, error) in
            if let data = dataOrNil {
                if let responseDictionary = try! NSJSONSerialization.JSONObjectWithData(
                    data, options:[]) as? NSDictionary {
                        //print(responseDictionary)
                        if (responseDictionary[&quot;data&quot;] != nil ) {

                            self.gifs = Gif.gifsWithArray(responseDictionary[&quot;data&quot;] as! [NSDictionary])

                            print(&quot;Connection to API successful!&quot;)
                            completion(gifs: self.gifs, error: nil)
                        }
                        else {
                            print(&quot;error&quot;)
                            completion(gifs: nil, error: error)
                        }
                } else { completion(gifs: nil, error: error) }
            } else { completion(gifs: nil, error: error) }
    });
    task.resume()
}
```



- OAuth (for twitter)

``` swift
func openUrl(url: NSURL?) {

    //Get access token
    fetchAccessTokenWithPath(&quot;oauth/access_token&quot;, method: &quot;POST&quot;, requestToken: BDBOAuth1Credential(queryString: url!.query), success: { (accessToken: BDBOAuth1Credential!) -&amp;gt; Void in
        print(&quot;Access Token received&quot;)

        TwitterClient.sharedInstance.requestSerializer.saveAccessToken(
            accessToken)

        TwitterClient.sharedInstance.GET(&quot;1.1/account/verify_credentials.json&quot;, parameters: nil, success: { (operation: NSURLSessionDataTask, response: AnyObject?) -&amp;gt; Void in
            //                print(&quot;user: \(response)&quot;)
            var user = User(dictionary: response as! NSDictionary)
            User.currentUser = user
            print(&quot;user.name = \(user.name)&quot;)
            self.loginCompletion!(user: user, error: nil)
            }, failure: { (operation: NSURLSessionDataTask?, error: NSError) -&amp;gt; Void in
                print(&quot;error: \(error)&quot;)
                self.loginCompletion?(user: nil, error: error)
        })

        })
        { (error: NSError!) -&amp;gt; Void in
            print(&quot;Access Token error&quot;)
            self.loginCompletion?(user: nil, error: error)
    }

}

func loginWithCompletion(completion: (user: User?, error: NSError?) -&amp;gt; ()) {
    loginCompletion = completion

    //remove access token if it exist previously
    TwitterClient.sharedInstance.requestSerializer.removeAccessToken()

    //Getting the request token and redirect to authorization page
    TwitterClient.sharedInstance.fetchRequestTokenWithPath(&quot;oauth/request_token&quot;, method: &quot;GET&quot;, callbackURL: NSURL(string: &quot;michokan://oauth&quot;), scope: nil, success: { (requestToken: BDBOAuth1Credential!) -&amp;gt; Void in
        print(&quot;Got request token&quot;)
        var authURL = NSURL(string: &quot;https://api.twitter.com/oauth/authorize?oauth_token=\(requestToken.token)&quot;)
        UIApplication.sharedApplication().openURL(authURL!)

        })
        { (error: NSError!) -&amp;gt; Void in
            print(&quot;Failed to get request token:  \(error)&quot;)
            self.loginCompletion?(user: nil, error: error)
    }
    //    manager.requestSerializer = [AFJSONRequestSerializer serializer];
}
```



- Map View

``` swift 
//use location manager to get the current location
locationManager = CLLocationManager()
locationManager.delegate = self
locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
locationManager.distanceFilter = 200
locationManager.requestWhenInUseAuthorization()

mapView.delegate = self

func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
    if status == CLAuthorizationStatus.AuthorizedWhenInUse {
        locationManager.startUpdatingLocation()
    }
}

func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -&amp;gt; MKAnnotationView? {
    let identifier = &quot;customAnnotationView&quot;

    // custom image annotation
    var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier)
    if (annotationView == nil) {
        annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)
    }
    else {
        annotationView!.annotation = annotation
    }
    annotationView!.image = UIImage(named: &quot;business&quot;)
    annotationView!.canShowCallout = true
    return annotationView
}

public func mapView(mapView: MKMapView, annotationView view: MKAnnotationView, didChangeDragState newState: MKAnnotationViewDragState, fromOldState oldState: MKAnnotationViewDragState) {
    mapView.reloadInputViews()
}

func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
    if let location = locations.first {
        let span = MKCoordinateSpanMake(0.1, 0.1)
        let region = MKCoordinateRegionMake(location.coordinate, span)
        region.center
        mapView.setRegion(region, animated: false)
    }
}

func addAnnotationAtCoordinate(coordinate: CLLocationCoordinate2D, title: String) {
    let annotation = MKPointAnnotation()
    annotation.coordinate = coordinate
    annotation.title = title
    mapView.addAnnotation(annotation)
    //  print(&quot;annotation added&quot;)
}

func goToLocation(location: CLLocation) {
    let span = MKCoordinateSpanMake(0.1, 0.1)
    let region = MKCoordinateRegionMake(location.coordinate, span)
    mapView.setRegion(region, animated: false)
}
```



- Search for table views/ collection views

``` swift
func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {
    searchResults = searchText.isEmpty ? businesses : businesses!.filter({ (business: Business) -&amp;gt; Bool in
        return (business.name)!.rangeOfString(searchText, options: .CaseInsensitiveSearch) != nil
    })
    businessTableView.reloadData()
}
```



- Gif playback (using Gifu library)

``` swift 
func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {

    print(&quot;cell click detected index path \(indexPath.row)&quot;)

    let cell = tableView.dequeueReusableCellWithIdentifier(&quot;cell&quot;, forIndexPath: indexPath) as! GifCell

    var gifData = NSData(contentsOfURL: NSURL(string: gifs![indexPath.row].playingImageUrl!)!)

    cell.gifImageView.prepareForAnimation(imageData: gifData!)
    cell.gifImageView.startAnimatingGIF()
}
```


## Tools-

1. Written in Swift
2. Use Cocoapods
3. Auto Layout all the way (iPhone 5/5s, 6/6s, 6Plus/6sPlus)
4. Git for source control via terminal

## Other resources-
1. [CodePath University][codepath]: _&quot;Without CodePath, I would still be trying to learn swift from a physical book&quot;_
2. [Slack][slack]: _&quot;Helping teams everywhere &#39;Be less busy&#39;&quot;_
3. [LiceCap][licecap]: _&quot;Gifs created with LiceCap&quot;_
4. [icons8][icons8]: _&quot;All the Icons You Need. Guaranteed.&quot;_

[codepath]:      https://codepath.com/
[slack]:   https://slack.com/
[licecap]: http://www.cockos.com/licecap/
[icons8]: https://icons8.com/
&lt;/center&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 12:24:00 -0700</pubDate>
        <link>https://monte9.github.io//2016/ios-portfolio/</link>
        <guid isPermaLink="true">https://monte9.github.io//2016/ios-portfolio/</guid>
        
        <category>iOS</category>
        
        
        <category>blogs</category>
        
      </item>
    
      <item>
        <title>Work Experience</title>
        <description>&lt;p&gt;&lt;strong&gt;I have had 5+ different jobs since I started college. I really enjoy taking on responsibilities, working with people and learning new things from peers and colleagues. Currently looking to explore new oppurtunities in the field of iOS development.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios-mobile-bootcamp--codepath-inc&quot;&gt;&lt;strong&gt;iOS Mobile Bootcamp&lt;/strong&gt; @ CodePath Inc&lt;/h3&gt;

&lt;h5 id=&quot;january-2016-present&quot;&gt;&lt;em&gt;January 2016-present&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;1 out of 100 students selected for iOS development track at CCSF&lt;/li&gt;
  &lt;li&gt;Explore major iOS topics according to current industry best practices&lt;/li&gt;
  &lt;li&gt;Developed 6+ iOS apps including cloning Twitter, Yelp and Giphy apps&lt;/li&gt;
  &lt;li&gt;Building iStream app using Parse Server + Heroku that will enable users to share their daily experience through gifs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios-developer--deckstr-inc&quot;&gt;&lt;strong&gt;iOS Developer&lt;/strong&gt; @ Deckstr Inc&lt;/h3&gt;

&lt;h5 id=&quot;august-2015-march-2016&quot;&gt;&lt;em&gt;August 2015-March 2016&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Independently implemented features such as Login w/ Parse, OAuth w/ Facebook and LinkedIn&lt;/li&gt;
  &lt;li&gt;Coordinate weekly iOS team meetings; complete weekly development deadlines&lt;/li&gt;
  &lt;li&gt;Participate in weekly full-team meetings- give updates on behalf of iOS team&lt;/li&gt;
  &lt;li&gt;Experience in Swift, Git/Github, Cocoapods, XCode, API’s, OAuth, 3rd party libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webmaster--san-francisco-state-university&quot;&gt;&lt;strong&gt;Webmaster&lt;/strong&gt; @ San Francisco State University&lt;/h3&gt;

&lt;h5 id=&quot;may-2015-present&quot;&gt;&lt;em&gt;May 2015-present&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Develop and maintain several department websites using Drupal CMS, WordPress and Adobe Dreamweaver&lt;/li&gt;
  &lt;li&gt;Improve web design, information architecture, search engine optimization&lt;/li&gt;
  &lt;li&gt;Perform site re-structuring, bug fixes, accessibility and usability testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;student-grader-csc-230--cs-dept-sf-state&quot;&gt;&lt;strong&gt;Student Grader (CSC 230)&lt;/strong&gt; @ CS Dept, SF State&lt;/h3&gt;

&lt;h5 id=&quot;august-2015-present&quot;&gt;&lt;em&gt;August 2015-present&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Grade student assignments as per instructor’s criteria&lt;/li&gt;
  &lt;li&gt;Provide feedback and raise concerns based on class performance&lt;/li&gt;
  &lt;li&gt;Complete and return assigned grading on a tight weekly schedule&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;note-taker--dprc-sf-state&quot;&gt;&lt;strong&gt;Note Taker&lt;/strong&gt; @ DPRC, SF State&lt;/h3&gt;

&lt;h5 id=&quot;september-december-2015&quot;&gt;&lt;em&gt;September-December 2015&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Volunteered to share notes with a fellow classmate as a reasonable accommodation through the Disability Programs and Resource Center (DPRC) for the duration of the semester.&lt;/li&gt;
  &lt;li&gt;Shared notes electronically through Google Docs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apple-representative--foothill-college-bookstore&quot;&gt;&lt;strong&gt;Apple Representative&lt;/strong&gt; @ Foothill College Bookstore&lt;/h3&gt;

&lt;h5 id=&quot;october-2012-july-2014&quot;&gt;&lt;em&gt;October 2012-July 2014&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Certified as Apple Product Professional (APP) and completed iOS Technical Training through Apple Sales Training Program (ASTO)&lt;/li&gt;
  &lt;li&gt;Responsible for sales and invoicing of Apple products up to $30,000&lt;/li&gt;
  &lt;li&gt;Performed shipping, receiving and shelf stocking of books and merchandise using MBS AS400 system and UPS Worldship&lt;/li&gt;
  &lt;li&gt;Demonstrated strong communication and multitasking skills along with excellent customer service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summer-intern--make-school-sf&quot;&gt;&lt;strong&gt;Summer Intern&lt;/strong&gt; @ Make School, SF&lt;/h3&gt;

&lt;h5 id=&quot;july--august-2013&quot;&gt;&lt;em&gt;July- August 2013&lt;/em&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Selected for the iOS development track; Batch of 2013&lt;/li&gt;
  &lt;li&gt;Explored application prototyping, user testing, UI/UX, Objective-C&lt;/li&gt;
  &lt;li&gt;Cultivated strong programming techniques and work ethic alongside experienced mentors&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Mar 2016 12:24:00 -0700</pubDate>
        <link>https://monte9.github.io//2016/work-experience/</link>
        <guid isPermaLink="true">https://monte9.github.io//2016/work-experience/</guid>
        
        <category>work</category>
        
        
        <category>blogs</category>
        
      </item>
    
  </channel>
</rss>
